// <auto-generated />
using System;
using Eurovision.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eurovision.Migrations
{
    [DbContext(typeof(EurovisionContext))]
    [Migration("20240421170004_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Finnish_Swedish_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eurovision.Models.Database.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Song")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EventId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Eurovision.Models.Database.PerformanceNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int?>("PerformanceNr")
                        .HasColumnType("int");

                    b.Property<int?>("SubCompetitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SubCompetitionId");

                    b.ToTable("PerformanceNumbers");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Eurovision.Models.Database.RoomUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomUsers");
                });

            modelBuilder.Entity("Eurovision.Models.Database.SubCompetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("SubCompetitions");
                });

            modelBuilder.Entity("Eurovision.Models.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int?>("SubCompetitionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoteAmount")
                        .HasColumnType("int");

                    b.Property<int?>("VoteCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SubCompetitionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoteCategoryId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Eurovision.Models.Database.VoteCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("VoteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VoteCategories");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Event", b =>
                {
                    b.HasOne("Eurovision.Models.Database.Country", "Country")
                        .WithMany("Events")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Participant", b =>
                {
                    b.HasOne("Eurovision.Models.Database.Country", "Country")
                        .WithMany("Participants")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eurovision.Models.Database.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Eurovision.Models.Database.PerformanceNumber", b =>
                {
                    b.HasOne("Eurovision.Models.Database.Participant", "Participant")
                        .WithMany("PerformanceNumbers")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Eurovision.Models.Database.SubCompetition", "SubCompetition")
                        .WithMany("PerformanceNumbers")
                        .HasForeignKey("SubCompetitionId");

                    b.Navigation("Participant");

                    b.Navigation("SubCompetition");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Role", b =>
                {
                    b.HasOne("Eurovision.Models.Database.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eurovision.Models.Database.RoomUser", b =>
                {
                    b.HasOne("Eurovision.Models.Database.Room", "Room")
                        .WithMany("RoomUsers")
                        .HasForeignKey("RoomId");

                    b.HasOne("Eurovision.Models.Database.User", "User")
                        .WithMany("RoomUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eurovision.Models.Database.SubCompetition", b =>
                {
                    b.HasOne("Eurovision.Models.Database.Event", "Event")
                        .WithMany("SubCompetitions")
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Vote", b =>
                {
                    b.HasOne("Eurovision.Models.Database.Participant", "Participant")
                        .WithMany("Votes")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Eurovision.Models.Database.SubCompetition", "SubCompetition")
                        .WithMany("Votes")
                        .HasForeignKey("SubCompetitionId");

                    b.HasOne("Eurovision.Models.Database.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");

                    b.HasOne("Eurovision.Models.Database.VoteCategory", "VoteCategory")
                        .WithMany("Votes")
                        .HasForeignKey("VoteCategoryId");

                    b.Navigation("Participant");

                    b.Navigation("SubCompetition");

                    b.Navigation("User");

                    b.Navigation("VoteCategory");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Country", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Event", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("SubCompetitions");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Participant", b =>
                {
                    b.Navigation("PerformanceNumbers");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Eurovision.Models.Database.Room", b =>
                {
                    b.Navigation("RoomUsers");
                });

            modelBuilder.Entity("Eurovision.Models.Database.SubCompetition", b =>
                {
                    b.Navigation("PerformanceNumbers");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Eurovision.Models.Database.User", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("RoomUsers");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Eurovision.Models.Database.VoteCategory", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
